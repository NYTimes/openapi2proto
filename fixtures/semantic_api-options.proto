syntax = "proto3";

import "google/protobuf/wrappers.proto";

import "google/protobuf/empty.proto";

import "google/api/annotations.proto";

import "blah/thing.proto";

import "google/protobuf/any.proto";

import "something.proto";

package thesemanticapi;

message GetConceptSearchRequest {
    enum GetConceptSearchRequest_Field {
        GETCONCEPTSEARCHREQUEST_FIELD_ALL = 0;
        GETCONCEPTSEARCHREQUEST_FIELD_PAGES = 1;
        GETCONCEPTSEARCHREQUEST_FIELD_TICKER_SYMBOL = 2;
        GETCONCEPTSEARCHREQUEST_FIELD_LINKS = 3;
        GETCONCEPTSEARCHREQUEST_FIELD_TAXONOMY = 4;
        GETCONCEPTSEARCHREQUEST_FIELD_COMBINATIONS = 5;
        GETCONCEPTSEARCHREQUEST_FIELD_GEOCODES = 6;
        GETCONCEPTSEARCHREQUEST_FIELD_ARTICLE_LIST = 7;
        GETCONCEPTSEARCHREQUEST_FIELD_SCOPE_NOTES = 8;
        GETCONCEPTSEARCHREQUEST_FIELD_SEARCH_API_QUERY = 9;
    }
    GetConceptSearchRequest_Field fields = 1;
    int32 offset = 2;
    string query = 3;
}

message GetConceptSearchResponse {
    string copyright = 1;
    int32 num_results = 2;
    repeated ConceptRelation results = 3;
    string status = 4;
}

message GetNameConceptTypeSpecificConceptRequest {
    ConceptTypeParam concept_type = 1;
    enum GetNameConceptTypeSpecificConceptRequest_Field {
        GETNAMECONCEPTTYPESPECIFICCONCEPTREQUEST_FIELD_ALL = 0;
        GETNAMECONCEPTTYPESPECIFICCONCEPTREQUEST_FIELD_PAGES = 1;
        GETNAMECONCEPTTYPESPECIFICCONCEPTREQUEST_FIELD_TICKER_SYMBOL = 2;
        GETNAMECONCEPTTYPESPECIFICCONCEPTREQUEST_FIELD_LINKS = 3;
        GETNAMECONCEPTTYPESPECIFICCONCEPTREQUEST_FIELD_TAXONOMY = 4;
        GETNAMECONCEPTTYPESPECIFICCONCEPTREQUEST_FIELD_COMBINATIONS = 5;
        GETNAMECONCEPTTYPESPECIFICCONCEPTREQUEST_FIELD_GEOCODES = 6;
        GETNAMECONCEPTTYPESPECIFICCONCEPTREQUEST_FIELD_ARTICLE_LIST = 7;
        GETNAMECONCEPTTYPESPECIFICCONCEPTREQUEST_FIELD_SCOPE_NOTES = 8;
        GETNAMECONCEPTTYPESPECIFICCONCEPTREQUEST_FIELD_SEARCH_API_QUERY = 9;
    }
    GetNameConceptTypeSpecificConceptRequest_Field fields = 2;
    string query = 3;
    string specific_concept = 4;
}

message GetNameConceptTypeSpecificConceptResponse {
    string copyright = 1;
    int32 num_results = 2;
    repeated Concept results = 3;
    string status = 4;
}

message Concept {
    repeated ConceptRelation ancestors = 1;
    message Article_list {
        message Result {
            string body = 1;
            string byline = 2;
            message Concepts {
                repeated string nytd_des = 1;
                repeated string nytd_org = 2;
                repeated string nytd_per = 3;
            }
            Concepts concepts = 3;
            string date = 4;
            string document_type = 5;
            string title = 6;
            string type_of_material = 7;
            string url = 8;
        }
        repeated Result results = 1;
        int32 total = 2;
    }
    Article_list article_list = 2;
    message Combination {
        string combination_note = 1;
        int32 combination_source_concept_id = 2;
        string combination_source_concept_name = 3;
        string combination_source_concept_type = 4;
        int32 combination_target_concept_id = 5;
        string combination_target_concept_name = 6;
        string combination_target_concept_type = 7;
    }
    repeated Combination combinations = 3;
    string concept_created = 4;
    int32 concept_id = 5;
    string concept_name = 6;
    string concept_status = 7;
    string concept_type = 8;
    string concept_updated = 9;
    repeated ConceptRelation descendants = 10;
    int32 is_times_tag = 11;
    message Link {
        int32 concept_id = 1;
        string concept_name = 2;
        string concept_status = 3;
        string concept_type = 4;
        int32 is_times_tag = 5;
        string link = 6;
        int32 link_id = 7;
        string link_type = 8;
        string mapping_type = 9;
        string relation = 10;
    }
    repeated Link links = 12;
    message Scope_note {
        string scope_note = 1;
        string scope_note_name = 2;
        string scope_note_type = 3;
    }
    repeated Scope_note scope_notes = 13;
    string search_api_query = 14;
    message Taxonomy {
        int32 source_concept_id = 1;
        string source_concept_name = 2;
        string source_concept_type = 3;
        string source_concept_vernacular = 4;
        int32 target_concept_id = 5;
        string target_concept_name = 6;
        string target_concept_type = 7;
        string target_concept_vernacular = 8;
        string taxonomic_relation = 9;
        string taxonomic_verification_status = 10;
    }
    repeated Taxonomy taxonomy = 15;
    string vernacular = 16;
}

message ConceptRelation {
    enum ConceptRelation_Class {
        CONCEPTRELATION_CLASS_NYTD_GEO = 0;
        CONCEPTRELATION_CLASS_NYTD_PER = 1;
        CONCEPTRELATION_CLASS_NYTD_ORG = 2;
        CONCEPTRELATION_CLASS_NYTD_DES = 3;
    }
    ConceptRelation_Class class = 1;
    string concept_created = 2;
    int32 concept_id = 3;
    string concept_name = 4;
    string concept_status = 5;
    string concept_type = 6;
    string concept_updated = 7;
    int32 is_times_tag = 8;
    string vernacular = 9;
}

enum ConceptTypeParam {
    NYTD_GEO = 0;
    NYTD_PER = 1;
    NYTD_ORG = 2;
    NYTD_DES = 3;
}

message TestModel {
    enum TestModel_Category {
        TESTMODEL_CATEGORY_NYTD_GEO = 0;
        TESTMODEL_CATEGORY_NYTD_PER = 1;
        TESTMODEL_CATEGORY_NYTD_ORG = 2;
        TESTMODEL_CATEGORY_NYTD_DES = 3;
    }
    TestModel_Category category = 1;
    message Class {
        string something = 1;
    }
    repeated Class class = 2;
    google.protobuf.Any test_any_ref = 3;
    google.protobuf.Any test_any_value = 4;
    bool test_bool = 5;
    google.protobuf.BoolValue test_bool_value = 6;
    google.protobuf.BytesValue test_bytes_value = 7;
    blah.Thing test_external_ref = 8;
    google.protobuf.Any test_float_value = 9;
    map<string, TestModel> test_map_object = 10;
    map<string, string> test_map_scalar = 11;
    google.protobuf.DoubleValue test_num_value = 12;
    google.protobuf.Int32Value test_numer_value = 13;
    something.RelativeBackRef test_relative_backdir_ref = 14;
    something.RelativeRef test_relative_ref = 15;
    google.protobuf.StringValue test_string_value = 16;
}

service TheSemanticAPIService {
    rpc GetConceptSearch(GetConceptSearchRequest) returns (GetConceptSearchResponse) {
      option (google.api.http) = {
        get: "/svc/semantic/v2/concept/concept/search.json"
      };
    }
    rpc GetNameConceptTypeSpecificConcept(GetNameConceptTypeSpecificConceptRequest) returns (GetNameConceptTypeSpecificConceptResponse) {
      option (google.api.http) = {
        get: "/svc/semantic/v2/concept/name/{concept-type}/{specific-concept}.json"
      };
    }
    rpc GetSomethingBlah(google.protobuf.Empty) returns (google.protobuf.Empty) {
      option (google.api.http) = {
        get: "/svc/semantic/v2/concept/something/blah.json"
      };
    }
}
